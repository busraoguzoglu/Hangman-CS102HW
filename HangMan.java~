// date        2/2/2016
// @ author    Doren Calliku
// section 3   
// @ version 1 2/2/2016

// Homework -- creating the constructor for the Hangman game

import java.util.Random;
public class HangMan {
  
//-----------------------------------------------------------------------------------------------

  // properties , constants
  
  private static final int  maxAllowedIncorrectTries = 6 ; 
  
  // all letters of the alphabet are unchangeable 
  private static final String allLetters = new StringBuffer("abcdefghijklmnopqrstuvwxyz");
  
  private String[]        secretWords ;
  private StringBuffer     secretWord ;
  private StringBuffer    usedLetters ;
  private StringBuffer     knownSoFar ; 
  private int  numberOfIncorrectTries ;
  private int k ;
  
  secretWords = new String [ 4 ] ;
  secretWords[0] =   "hangman";
  secretWords[1] =    "divide";
  secretWords[2] =  "computer";
  secretWords[3] = "professor";
  
//-----------------------------------------------------------------------------------------------

  // create a constructor of HangMan with the given properties
 
  public HangMan ()
  {
    // in order to choose from the list ( this time array ) in a random way the word
    k = (int) Math.random() * 5 ;
    
    // take the secret word and form the StringBuffer which is changeable with its characters
    secretWord = new StringBuffer ( secretWords[k] ); 
    
    // the game hasn't started yet so there are no tryings 
    numberOfIncorrectTries = 0 ;
    
    // no letter is known but in place of the letters there must be stars to show how long 
    // the word is so we form it by a for loop , knowing its length ..
    knownSoFar = new StringBuffer("");
    for ( int j = 0 ; j < secretWord.length() ; j ++ ){
      knownSoFar.append("*");
    }
    
    // used letters are empty because we haven't used any yet 
    usedLetters = new StringBuffer(""); 
  }
  
  //methods
  public String chooseSecretWord()
   {
  String[] secretWord =  {"java" , "homework" , "programming" , "computer" , "coding", "lecture" , "music" , "sophisticated" , "university" , "student"};
    int randomSelection;

    Random rand = new Random();
  int  randomSelection = rand.nextInt(10) + 1;

    return secretWord[randomSelection];

   }

   public int tryThis(char letter)
    {
        //Variables
        boolean flag = true;
        //keeps the occurance rate of the letter in the word
        int letterMatch = 0;
        
        //Code
        //Checks if letter is capitilised
        if (letter <= 'Z' && letter>= 'A')
        {
            //turns letter into lowercase
            letter = (char)(letter - 'A' +'a');
        }
        
        //Checks if given char is letter
        if (!(letter <= 'z' && letter>= 'a'))
        {
            return -1;
        }
        
        //Checks if letter is already used
        for (int i =0; i < (this.usedLetters).length(); i++)
        { 
            if (letter == (this.usedLetters).charAt(i))
            {
                return -2;
            }
        }
        
        //Checks if game is over by incorrect tries
        if (this.numberOfIncorrectTries >= this.maxAllowedIncorrectTries) 
        {
            //Since the game is over usedLetters is cleared
            this.usedletters = "";
            return -3;
        }
        
        //Checks if game is over by correct guess
        if (!(this.knownSoFar.equals(this.secretWord)))
        { 
            //Checks letter if its in the word
            for (int i =0; i < (this.secretWord).length(); i++)
            {
                //if letter is in the i th index...
                if ((this.secretWord).charAt(i) == letter)
                {
                    //...Avoids outOfBounds Exception
                    if (i == this.secretWord.length() -1 )
                    {
                        //...Updates knownSoFar
                        this.knownSoFar = this.knownSoFar.substring(0,i) + letter; 
                    }    
                    //...Updates knownSoFar
                    this.knownSoFar = this.knownSoFar.substring(0,i) + letter + this.knownSoFar.substring(i+1);
                    //... adds letter to usedLetters
                    this.usedLetters = usedLetters + letter;
                    //... increments the count ofmatching letters
                    letterMatch++;
                    //... flag boolean to avoid other if condition from working
                    flag =false;
                }
            }
            // if letter is not in the word...
            if (flag)
            {
                //... adds letter to usedLetters
                this.usedLetters = usedLetters + letter;
                //increment the incorrect tries
                numberOfIncorrectTries++;
            }
            // returns the amout of matching letters
            return letterMatch;
        }
        
        //Since the game is over usedLetters is cleared
        this.usedletters = "";
        //---> ends the game if word is guessed completely
        return -3;
    }

}
